<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/task  
        http://www.springframework.org/schema/task/spring-task-4.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<context:annotation-config />
    <!--&lt;!&ndash;&lt;!&ndash; 定时任务 &ndash;&gt;&ndash;&gt;-->
    <!--&lt;!&ndash;<task:annotation-driven/>&ndash;&gt;-->
    <context:component-scan base-package="com.springapp.mvc">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 配置事务 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" />-->
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="locations">
            <list>
                <value>classpath*:jdbc.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8" />
    </bean>
    
    <!-- 数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
    	<property name="driverClassName" value="${dataSource.driverClass}" />  
        <property name="url" value="${dataSource.jdbcUrl}" />  
        <property name="username" value="${dataSource.username}" />  
        <property name="password" value="${dataSource.password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${dataSource.initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${dataSource.maxActive}"></property>
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${dataSource.maxIdle}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${dataSource.minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${dataSource.maxWait}"></property>
        <property name="testOnBorrow" value="${dataSource.testOnBorrow}" />
        <property name="validationQuery" value="${dataSource.validationQuery}" />
    </bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:spring/spring-mybatis.xml" />
        <property name="mapperLocations" value="classpath*:mapper/*.xml" />
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- dao mapper扫描路径 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.springapp.mvc.dao"/>
    </bean>

    <!--<bean id="jedisPool" class="redis.clients.jedis.JedisPool">-->
    	<!--<constructor-arg name="host" value="${redis.host}" />-->
        <!--<constructor-arg name="port" value="${redis.port}" />-->
        <!--<constructor-arg name="timeout" value="${redis.timeout}" />-->
        <!--<constructor-arg name="poolConfig">-->
            <!--<bean class="redis.clients.jedis.JedisPoolConfig">-->
                <!--<property name="maxTotal" value="${redis.pool.maxTotal}" />-->
                <!--<property name="maxIdle" value="${redis.pool.maxIdle}" />-->
                <!--<property name="minIdle" value="${redis.pool.minIdle}" />-->
                <!--<property name="maxWaitMillis" value="${redis.pool.maxWait}" />-->
                <!--<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />-->
                <!--<property name="testOnReturn" value="${redis.pool.testOnReturn}" />-->
                <!--<property name="testWhileIdle" value="${redis.pool.testWhildIdle}" />-->
            <!--</bean>-->
        <!--</constructor-arg>-->
    <!--</bean>-->
</beans>